// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_ReportInterfaces_FullMethodName = "/agent.AgentService/ReportInterfaces"
	AgentService_SendPacketEvent_FullMethodName  = "/agent.AgentService/SendPacketEvent"
	AgentService_PollCommand_FullMethodName      = "/agent.AgentService/PollCommand"
	AgentService_GetBPFConfig_FullMethodName     = "/agent.AgentService/GetBPFConfig"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	ReportInterfaces(ctx context.Context, in *ReportInterfacesRequest, opts ...grpc.CallOption) (*Empty, error)
	SendPacketEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PacketEvent, Empty], error)
	PollCommand(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandsResponse, error)
	GetBPFConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BPFConfig, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) ReportInterfaces(ctx context.Context, in *ReportInterfacesRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AgentService_ReportInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SendPacketEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PacketEvent, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_SendPacketEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PacketEvent, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_SendPacketEventClient = grpc.ClientStreamingClient[PacketEvent, Empty]

func (c *agentServiceClient) PollCommand(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandsResponse)
	err := c.cc.Invoke(ctx, AgentService_PollCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetBPFConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BPFConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BPFConfig)
	err := c.cc.Invoke(ctx, AgentService_GetBPFConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
type AgentServiceServer interface {
	ReportInterfaces(context.Context, *ReportInterfacesRequest) (*Empty, error)
	SendPacketEvent(grpc.ClientStreamingServer[PacketEvent, Empty]) error
	PollCommand(context.Context, *Empty) (*CommandsResponse, error)
	GetBPFConfig(context.Context, *Empty) (*BPFConfig, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) ReportInterfaces(context.Context, *ReportInterfacesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportInterfaces not implemented")
}
func (UnimplementedAgentServiceServer) SendPacketEvent(grpc.ClientStreamingServer[PacketEvent, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendPacketEvent not implemented")
}
func (UnimplementedAgentServiceServer) PollCommand(context.Context, *Empty) (*CommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollCommand not implemented")
}
func (UnimplementedAgentServiceServer) GetBPFConfig(context.Context, *Empty) (*BPFConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBPFConfig not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_ReportInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReportInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReportInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReportInterfaces(ctx, req.(*ReportInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SendPacketEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).SendPacketEvent(&grpc.GenericServerStream[PacketEvent, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_SendPacketEventServer = grpc.ClientStreamingServer[PacketEvent, Empty]

func _AgentService_PollCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).PollCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_PollCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).PollCommand(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetBPFConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetBPFConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetBPFConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetBPFConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportInterfaces",
			Handler:    _AgentService_ReportInterfaces_Handler,
		},
		{
			MethodName: "PollCommand",
			Handler:    _AgentService_PollCommand_Handler,
		},
		{
			MethodName: "GetBPFConfig",
			Handler:    _AgentService_GetBPFConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPacketEvent",
			Handler:       _AgentService_SendPacketEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "agent/agent.proto",
}
