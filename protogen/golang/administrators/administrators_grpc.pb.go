// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: administrators/administrators.proto

package administrators

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdministratorsService_Create_FullMethodName   = "/administrators.AdministratorsService/Create"
	AdministratorsService_Activate_FullMethodName = "/administrators.AdministratorsService/Activate"
	AdministratorsService_Get_FullMethodName      = "/administrators.AdministratorsService/Get"
	AdministratorsService_List_FullMethodName     = "/administrators.AdministratorsService/List"
	AdministratorsService_Update_FullMethodName   = "/administrators.AdministratorsService/Update"
	AdministratorsService_Delete_FullMethodName   = "/administrators.AdministratorsService/Delete"
)

// AdministratorsServiceClient is the client API for AdministratorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministratorsServiceClient interface {
	Create(ctx context.Context, in *CreateAdministratorRequest, opts ...grpc.CallOption) (*Empty, error)
	Activate(ctx context.Context, in *ActivateAdministratorsRequest, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *GetAdministratorRequest, opts ...grpc.CallOption) (*GetAdministratorResponse, error)
	List(ctx context.Context, in *ListAdministratorsRequest, opts ...grpc.CallOption) (*ListAdministratorsResponse, error)
	Update(ctx context.Context, in *UpdateAdministratorRequest, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *DeleteAdministratorRequest, opts ...grpc.CallOption) (*Empty, error)
}

type administratorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministratorsServiceClient(cc grpc.ClientConnInterface) AdministratorsServiceClient {
	return &administratorsServiceClient{cc}
}

func (c *administratorsServiceClient) Create(ctx context.Context, in *CreateAdministratorRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdministratorsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) Activate(ctx context.Context, in *ActivateAdministratorsRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdministratorsService_Activate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) Get(ctx context.Context, in *GetAdministratorRequest, opts ...grpc.CallOption) (*GetAdministratorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdministratorResponse)
	err := c.cc.Invoke(ctx, AdministratorsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) List(ctx context.Context, in *ListAdministratorsRequest, opts ...grpc.CallOption) (*ListAdministratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdministratorsResponse)
	err := c.cc.Invoke(ctx, AdministratorsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) Update(ctx context.Context, in *UpdateAdministratorRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdministratorsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) Delete(ctx context.Context, in *DeleteAdministratorRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdministratorsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministratorsServiceServer is the server API for AdministratorsService service.
// All implementations must embed UnimplementedAdministratorsServiceServer
// for forward compatibility.
type AdministratorsServiceServer interface {
	Create(context.Context, *CreateAdministratorRequest) (*Empty, error)
	Activate(context.Context, *ActivateAdministratorsRequest) (*Empty, error)
	Get(context.Context, *GetAdministratorRequest) (*GetAdministratorResponse, error)
	List(context.Context, *ListAdministratorsRequest) (*ListAdministratorsResponse, error)
	Update(context.Context, *UpdateAdministratorRequest) (*Empty, error)
	Delete(context.Context, *DeleteAdministratorRequest) (*Empty, error)
	mustEmbedUnimplementedAdministratorsServiceServer()
}

// UnimplementedAdministratorsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdministratorsServiceServer struct{}

func (UnimplementedAdministratorsServiceServer) Create(context.Context, *CreateAdministratorRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdministratorsServiceServer) Activate(context.Context, *ActivateAdministratorsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedAdministratorsServiceServer) Get(context.Context, *GetAdministratorRequest) (*GetAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAdministratorsServiceServer) List(context.Context, *ListAdministratorsRequest) (*ListAdministratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAdministratorsServiceServer) Update(context.Context, *UpdateAdministratorRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdministratorsServiceServer) Delete(context.Context, *DeleteAdministratorRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdministratorsServiceServer) mustEmbedUnimplementedAdministratorsServiceServer() {}
func (UnimplementedAdministratorsServiceServer) testEmbeddedByValue()                               {}

// UnsafeAdministratorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministratorsServiceServer will
// result in compilation errors.
type UnsafeAdministratorsServiceServer interface {
	mustEmbedUnimplementedAdministratorsServiceServer()
}

func RegisterAdministratorsServiceServer(s grpc.ServiceRegistrar, srv AdministratorsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdministratorsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdministratorsService_ServiceDesc, srv)
}

func _AdministratorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Create(ctx, req.(*CreateAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateAdministratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Activate(ctx, req.(*ActivateAdministratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Get(ctx, req.(*GetAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdministratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).List(ctx, req.(*ListAdministratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Update(ctx, req.(*UpdateAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Delete(ctx, req.(*DeleteAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdministratorsService_ServiceDesc is the grpc.ServiceDesc for AdministratorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdministratorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "administrators.AdministratorsService",
	HandlerType: (*AdministratorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AdministratorsService_Create_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _AdministratorsService_Activate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AdministratorsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AdministratorsService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdministratorsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdministratorsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrators/administrators.proto",
}
