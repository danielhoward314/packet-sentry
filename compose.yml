services:
  agent-api:
    container_name: packet-sentry-agent-api
    build:
      context: .
      target: agent-api
      dockerfile: Dockerfile
    env_file:
      - env/agent-api
    ports:
      - "9443:9443"
      - "9444:9444"
    networks:
      - backend
    depends_on:
      - nats
      - postgres
      - redis
  cli:
    container_name: packet-sentry-cli
    build:
      context: .
      target: cli
      dockerfile: Dockerfile
    volumes:
      - ./cmd/cli/commands/migrations:/migrations
      - ./cmd/cli/commands/migrations_timescale:/migrations_timescale
    networks:
      - backend
    env_file:
      - env/postgres
    depends_on:
      - postgres
  gateway:
    container_name: packet-sentry-gateway
    build:
      context: .
      target: gateway
      dockerfile: Dockerfile
    env_file:
      - env/gateway
    networks:
      - backend
    ports:
      - "8080:8080"
    depends_on:
      - web-api
  maildev:
    container_name: maildev
    image: maildev/maildev
    ports:
      - "1080:1080"
    networks:
      - backend
  postgres:
    # postgres 17 with timescaledb extension
    image: timescale/timescaledb:latest-pg17
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - $HOME/docker/volumes/postgres:/var/lib/postgresql/data
    # the command is needed to preload the timescaledb library
    # or else the `CREATE EXTENSION IF NOT EXISTS timescaledb;` fails
    command:
      - postgres
      - -c
      - shared_preload_libraries=timescaledb
    networks:
      - backend
  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - backend
  web-api:
    container_name: packet-sentry-web-api
    build:
      context: .
      target: web-api
      dockerfile: Dockerfile
    env_file:
      - env/web-api
    networks:
      - backend
    depends_on:
      - maildev
      - nats
      - postgres
      - redis
  web-console:
    container_name: packet-sentry-web-console
    build:
      context: ./packet-sentry-web-console
      dockerfile: Dockerfile
    ports:
      - "80:80"
    restart: always
    networks:
      backend:
        aliases:
          - web-console.packet-sentry.local
  worker:
    container_name: packet-sentry-worker
    build:
      context: .
      target: worker
      dockerfile: Dockerfile
    env_file:
      - env/worker
    networks:
      - backend
    depends_on:
      - nats
      - postgres
  nats:
    image: nats
    container_name: nats-server
    ports:
      - "4222:4222"
    command: ["-js"]  # Enables JetStream
    networks:
      backend:

networks:
  backend:
    driver: bridge