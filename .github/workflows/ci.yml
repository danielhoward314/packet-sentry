name: Build, Test, Sign, and Upload packet-sentry

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        architecture: [amd64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.24

      # Get values for cache paths to be used in later steps
      - name: Set Up Go Build Cache
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_ENV
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_ENV

      # Cache go build cache
      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.go-build }}
          key: ${{ runner.os }}-${{ matrix.architecture }}-${{ github.ref_name }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache
      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.go-mod }}
          key: ${{ runner.os }}-${{ matrix.architecture }}-${{ github.ref_name }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Set up Go environment variables
        run: |
          echo "GOARCH=${{ matrix.architecture }}" >> $GITHUB_ENV
          echo "GOOS=${{ matrix.os }}" >> $GITHUB_ENV

      - name: Build Go Binary and Installer for ${{ matrix.os }} ${{ matrix.architecture }}
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]
            ./scripts/build linux ${{ matrix.architecture }}
            go run ./linux-installer/main.go 1.0.0 ${{ matrix.architecture }}
            # TODO: linux installer validation
          fi
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ./scripts/build darwin ${{ matrix.architecture }}
            # TODO: use git to get version
            ./macos-installer/build-installer.sh 1.0.0 ${{ matrix.architecture }}
            ./macos-installer/validate-installer 1.0.0 ${{ matrix.architecture }}
          fi
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pwsh ./scripts/build.ps1 ${{ matrix.architecture }}
            # TODO: use git to get version
            # TODO: ensure WiX Toolset is installed before we can build the installer
            # TODO: windows installer validation
          fi