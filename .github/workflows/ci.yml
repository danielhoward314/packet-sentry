name: Build, Test, Sign, and Upload packet-sentry

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, windows-latest]
        architecture: [amd64, arm64]
        # use exclude for non-sensical combinations
        exclude:
          - os: ubuntu-latest
            architecture: arm64
          - os: ubuntu-24.04-arm
            architecture: amd64
          - os: windows-latest
            architecture: arm64 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   # fetch full history
          fetch-tags: true # ensure tags are available


      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.24

      # Get values for cache paths to be used in later steps
      - name: Set Up Go Build Cache
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_ENV
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_ENV

      # Cache go build cache
      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.go-build }}
          key: ${{ runner.os }}-${{ matrix.architecture }}-${{ github.ref_name }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache
      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.go-mod }}
          key: ${{ runner.os }}-${{ matrix.architecture }}-${{ github.ref_name }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Set up Go environment variables
        shell: bash
        run: |
          echo "GOARCH=${{ matrix.architecture }}" >> $GITHUB_ENV
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            OS_NAME="linux"
          elif [ "${{ matrix.os }}" == "ubuntu-24.04-arm" ]; then
            OS_NAME="linux"
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            OS_NAME="darwin"
          else
            OS_NAME="windows"
          fi
          echo "GOOS=${OS_NAME}" >> $GITHUB_ENV

      - name: Build Go Binary and Installer for ${{ matrix.os }} ${{ matrix.architecture }}
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ "$GITHUB_REF" == refs/heads/* ]]; then
            BRANCH="${GITHUB_REF#refs/heads/}"
            VERSION="0.0.0-${BRANCH}-${GITHUB_SHA::7}"
          else
            VERSION="0.0.0-unknown-${GITHUB_SHA::7}"
          fi

          echo "Derived version: $VERSION"

          echo "version from github ref is ${VERSION}"
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "installing libpcap dependency"
            sudo apt-get install -y libpcap-dev
            echo "building Go binaries for linux amd64"
            ./scripts/build_agent "linux" "amd64"
            echo "build Linux .deb installer for version ${VERSION} for amd64"
            go run ./linux-installer/main.go "${VERSION}" "amd64" "deb"
            # TODO: linux installer validation
          elif [ "${{ matrix.os }}" == "ubuntu-24.04-arm" ]; then
            echo "installing libpcap dependency"
            sudo apt-get install -y libpcap-dev
            echo "building Go binaries for linux arm64"
            ./scripts/build_agent "linux" "arm64"
            echo "build Linux .deb installer for version ${VERSION} for arm64"
            go run ./linux-installer/main.go "${VERSION}" "arm64" "deb"
            # TODO: linux installer validation
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "building Go binaries for darwin ${{ matrix.architecture }}"
            ./scripts/build_agent darwin "${{ matrix.architecture }}"
            # TODO: use git to get version
            echo "building macOS pkg installer for version ${VERSION} for ${{ matrix.architecture }}"
            ./macos-installer/build-installer.sh "${VERSION}" "${{ matrix.architecture }}"
            echo "validating macOS pkg installer for version ${VERSION} for ${{ matrix.architecture }}"
            ./macos-installer/validate-installer.sh "${VERSION}" "${{ matrix.architecture }}"
          else
            echo "building Go binaries for windows ${{ matrix.architecture }}"
            pwsh ./scripts/build_agent.ps1 "${{ matrix.architecture }}"
            # TODO: use git to get version
            pwsh ./windows-installer/build-installer.ps1 -arch "${{ matrix.architecture }}" -version "${VERSION}" -ci $true
            # TODO: windows installer validation
          fi
      - name: Upload Installer Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.os }}-${{ matrix.architecture }}
          path: >
            ${{
              matrix.os == 'ubuntu-latest' && './linux-installer/build/debfinalout/*.deb' ||
              matrix.os == 'ubuntu-24.04-arm' && './linux-installer/build/debfinalout/*.deb' ||
              matrix.os == 'macos-latest' && './macos-installer/package/*.pkg' ||
              './windows-installer/*.msi'
            }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: ./dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

